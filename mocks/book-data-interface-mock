// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	books "clean-arch/features/books"

	mock "github.com/stretchr/testify/mock"
)

// BookDataInterfaceMock is an autogenerated mock type for the BookDataInterface type
type BookDataInterfaceMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: bookId
func (_m *BookDataInterfaceMock) Delete(bookId uint) error {
	ret := _m.Called(bookId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(bookId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: input
func (_m *BookDataInterfaceMock) Insert(input books.BookEntity) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(books.BookEntity) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectAll provides a mock function with given fields:
func (_m *BookDataInterfaceMock) SelectAll() ([]books.BookEntity, error) {
	ret := _m.Called()

	var r0 []books.BookEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]books.BookEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []books.BookEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]books.BookEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectByBookId provides a mock function with given fields: bookId
func (_m *BookDataInterfaceMock) SelectByBookId(bookId uint) (books.BookEntity, error) {
	ret := _m.Called(bookId)

	var r0 books.BookEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (books.BookEntity, error)); ok {
		return rf(bookId)
	}
	if rf, ok := ret.Get(0).(func(uint) books.BookEntity); ok {
		r0 = rf(bookId)
	} else {
		r0 = ret.Get(0).(books.BookEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(bookId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: bookId, input
func (_m *BookDataInterfaceMock) Update(bookId uint, input books.BookEntity) error {
	ret := _m.Called(bookId, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, books.BookEntity) error); ok {
		r0 = rf(bookId, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBookDataInterfaceMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookDataInterfaceMock creates a new instance of BookDataInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookDataInterfaceMock(t mockConstructorTestingTNewBookDataInterfaceMock) *BookDataInterfaceMock {
	mock := &BookDataInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
